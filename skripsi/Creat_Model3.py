# -*- coding: utf-8 -*-
"""Fix_Program.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1HWcHyfM26clextg44OzkJ4LRZnxJKsMJ
"""

import numpy as np
import tensorflow as tf
import sys
import pandas as pd
import seaborn as sns
from pylab import rcParams
import matplotlib.pyplot as plt
from matplotlib import rc
from sklearn.model_selection import train_test_split
from keras.models import Sequential
from pandas.plotting import register_matplotlib_converters
from keras.layers import Dense, LSTM, Dropout
from keras import regularizers

def create_dataset(X, y, time_steps=1):
    Xs, ys = [], []
    for i in range(len(X) - time_steps):
        v = X.iloc[i:(i + time_steps)].values
        Xs.append(v)
        ys.append(y.iloc[i + time_steps])
    return np.array(Xs), np.array(ys)


register_matplotlib_converters()
sns.set(style='whitegrid', palette='muted', font_scale=1.5)

rcParams['figure.figsize'] = 22, 10

df = pd.read_csv(
  "../data/Tanggal_13-16.csv",
  parse_dates=['timestamp'],
  index_col="timestamp"
)
# Set index

print(df)
print(df.shape)
print(df.head())

x_simple = np.array(df['suhu_2'])
y_simple = np.array(df['kelembaban_tanah'])
# Z_simple = np.array(df['kelembaban_tanah'])
my_rho = np.corrcoef(x_simple, y_simple,)
print('koefisien',my_rho)

from sklearn.preprocessing import RobustScaler, MinMaxScaler
train_size = int(len(df) * 0.8)
test_size = len(df) - train_size
train, test = df.iloc[0:train_size], df.iloc[train_size:len(df)]
print(len(train), len(test))
f_columns = ['suhu_2', 'suhu_permukaan']

f_transformer = RobustScaler()
kelembaban_2_transformer = RobustScaler()
# f_transformer = MinMaxScaler()
# kelembaban_2_transformer = MinMaxScaler()

f_transformer = f_transformer.fit(train[f_columns].to_numpy())
kelembaban_2_transformer = kelembaban_2_transformer.fit(train[['kelembaban_2']])

train.loc[:, f_columns] = f_transformer.transform(train[f_columns].to_numpy())
train['kelembaban_2'] = kelembaban_2_transformer.transform(train[['kelembaban_2']])

test.loc[:, f_columns] = f_transformer.transform(test[f_columns].to_numpy())
test['kelembaban_2'] = kelembaban_2_transformer.transform(test[['kelembaban_2']])

time_steps = 10

# reshape to [samples, time_steps, n_features]

X_train, y_train = create_dataset(train, train.kelembaban_2, time_steps)
X_test, y_test = create_dataset(test, test.kelembaban_2, time_steps)

print("X_train :",X_train)
print("X_train shape:",X_train.shape)
print("y_train :",y_train)
print("y_train shape :",y_train.shape)
print(X_train.shape, y_train.shape)

model = Sequential()
model.add(LSTM(62, activation='tanh', input_shape=(X_train.shape[1], X_train.shape[2]),kernel_regularizer=regularizers.l2(0.001)))
model.add(Dropout(0.2))

model.add(Dense(1))

model.compile(loss='mse', optimizer='rmsprop', metrics=['mse','accuracy'])
# print('compilation time : {}'.format(time.time() - start))

model.fit(X_train, y_train,  epochs=3, verbose=2, validation_split = 0.1, batch_size=32, shuffle=False)

y_pred = model.predict(X_test)

y_train_inv = kelembaban_2_transformer.inverse_transform(y_train.reshape(1, -1))
y_test_inv = kelembaban_2_transformer.inverse_transform(y_test.reshape(1, -1))
y_pred_inv = kelembaban_2_transformer.inverse_transform(y_pred)
print('y_pred_inv :',y_pred_inv)

# calculate MSE
from math import sqrt
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error

MSE = mean_squared_error(y_test, y_pred)
RMSE = sqrt(mean_squared_error(y_test, y_pred))
#R_2 = r2_score(y_test, y_pred)
MAE = mean_absolute_error(y_test, y_pred);
#print('Test Score: %.2f R2 Score: ' % (R_2))
print('Test Score: %.2f MAE: ' % (MAE))
print('Test Score: %.2f MSE' % (MSE))
print('Test Score: %.2f RMSE' % (RMSE))

#Predict With Future
plt.plot(np.arange(0, len(y_train)), y_train_inv.flatten(), 'g', label="history")
plt.plot(np.arange(len(y_train), len(y_train) + len(y_test)), y_test_inv.flatten(), marker='.', label="true")
plt.plot(np.arange(len(y_train), len(y_train) + len(y_test)), y_pred_inv.flatten(), 'r', label="prediction")
plt.ylabel('Kelembamban')
plt.xlabel('Time Step')
plt.legend()
plt.show();

# # Output Model
# import pickle
#
# with open('../model/lstm3.pkl', 'wb') as f:
#     pickle.dump(model, f)
#
# with open('../model/scaler3.pkl', 'wb') as f:
#     pickle.dump(f_transformer, f)
#
# with open('../model/scaler3_2.pkl', 'wb') as f:
#     pickle.dump(kelembaban_2_transformer, f)